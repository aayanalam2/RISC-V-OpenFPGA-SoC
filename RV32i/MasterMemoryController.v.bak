module MasterMemoryController (
    input clk,       
    input reset, 
    
    output reg [1:0] wb_address,   
    output reg [31:0] wb_data_out, 
    output reg wb_we,              
    output reg wb_bus_cycle,
	                    
);


reg [31:0] memory [0:3]; 
reg [1:0] addr_pointer;   

integer i;

always @(posedge clk or negedge reset) begin
if (!reset) begin
        addr_pointer <= 3'b000;     
        wb_address <= 2'b00;         
        wb_data_out <= 32'h00000000; 
        wb_stb <= 1'b0;              
        wb_we <= 1'b0;               
        wb_bus_cycle <= 1'b0; 
		  
        
        for (i = 0; i < 3; i = i + 1) 
		  begin
            memory[i] <= 32'h00000000;
        end
		  
    end 
	 
	 else begin
        
        case (addr_pointer)
            2'b00: begin
                wb_address <= 2'b00;         
                wb_data_out <= memory[0];    
                wb_stb <= 1'b1;              
                wb_we <= 1'b1;               
                wb_bus_cycle <= 1'b1;        
            end
				 2'b01: begin
                wb_address <= 2'b01;         
                wb_data_out <= memory[1];    
                wb_stb <= 1'b1;              
                wb_we <= 1'b1;               
                wb_bus_cycle <= 1'b1;        
            end
				2'b10: begin
                wb_address <= 2'b10;         
                wb_data_out <= memory[2];    
                wb_stb <= 1'b1;              
                wb_we <= 1'b1;               
                wb_bus_cycle <= 1'b1;        
            end
				
				2'b11: begin
                wb_address <= 2'b11;         
                wb_data_out <= memory[3];    
                wb_stb <= 1'b1;              
                wb_we <= 1'b1;               
                wb_bus_cycle <= 1'b1;        
            end
        endcase

        if (wb_stb && wb_we && wb_bus_cycle) begin
            addr_pointer <= addr_pointer + 1;
        end
    end
end

// Other functionalities like handling fpga_tail can be added here

endmodule
